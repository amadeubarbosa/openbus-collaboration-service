/**
 * \mainpage Documentação da IDL
 */
#ifndef __TECGRAF_OPENBUS_CORE_CREDENTIAL_IDL__
#define __TECGRAF_OPENBUS_CORE_CREDENTIAL_IDL__

#include "scs.idl"
#include "core.idl"

/**
 * \brief Módulo dos sistemas e aplicações do Tecgraf.
 */
module tecgraf {

/**
 * \brief Módulo do middleware OpenBus.
 */
module openbus {

/**
 * \brief Módulo de definições de serviços do OpenBus.
 */
module services {

/**
 * \brief Módulo de definições do serviço de colaboração do OpenBus.
 */
module collaboration {

/**
 * \brief Módulo de versionamento do serviço de colaboração.
 */
module v1_0 {

/** \brief Nome do serviço de colaboração. */
const string CollaborationServiceName = "CollaborationService";
/** \brief Nome da faceta de registro de colaboração. */
const string CollaborationRegistryFacet = "CollaborationRegistry";
/** \brief Nome da faceta de observação de colaboração. */
const string CollaborationObserverFacet = "CollaborationObserver";

/** \brief Identificador da inscrição de um observador. */
typedef long Cookie;
/** \brief Identificador de um membro. */
typedef string Identifier;

/**
 * \brief Indica que o nome de membro já esta em uso na sessão de colaboração.
 */
exception NameInUse { Identifier name; };

/**
 * \brief Representa um observador de uma colaboração.
 */
interface CollaborationObserver {
	
	/**
	 * \brief Notifica que uma membro foi incluído na colaboração.
	 *
	 * \param name nome do membro incluído.
	 * \param member o membro incluído.
	 */
	void memberAdded(in Identifier name, in ::scs::core::IComponent member)
		raises (core::v2_0::services::ServiceFailure);
	
	/**
	 * \brief Notifica que uma membro foi removido na colaboração.
	 *
	 * \param name nome do membro removido.
	 */
	void memberRemoved(in Identifier name)
		raises (core::v2_0::services::ServiceFailure);
	
	/**
	 * \brief Notifica que colaboração foi finalizada.
	 */
	void destroyed()
		raises (core::v2_0::services::ServiceFailure);
	
};

/**
 * \brief Representa um consumidor de eventos.
 */
interface EventConsumer {
	/**
	 * \brief Recebe um evento
	 *
	 * \param event o evento enviado.
	 */
	void push(in any event)
		raises (core::v2_0::services::ServiceFailure);
};

/**
 * \brief Representa um canal de eventos.
 */
interface EventChannel {
	/**
	 * \brief Registra um consumidor para consumir eventos deste canal.
	 *
	 * \param cosumer o consumidor de eventos.
	 * \return identificador do registro do consumidor.
	 */
	Cookie subscribe(in EventConsumer consumer)
		raises (core::v2_0::services::ServiceFailure);
	/**
	 * \brief Descadastra um consumidor de eventos deste canal.
	 *
	 * \param ck o identificador do registro do consumidor de eventos.
	 * \return \c true, caso o descadastramento foi realizado com sucesso, ou 
	 * \c false, caso contrário.
	 */
	boolean unsubscribe(in Cookie ck)
		raises (core::v2_0::services::ServiceFailure);
	/**
	 * \brief Publica um evento no canal.
	 *
	 * \param event o evento.
	 */
	void push(in any event)
		raises (core::v2_0::services::ServiceFailure);
};

/** \brief Representa um membro de uma sessão de colaboração */
struct CollaborationMember {
	/** \brief Identificador do membro. */
	Identifier name;
	/** \brief Componente do membro */
	::scs::core::IComponent member;
};

/** \brief Sequência de membros. */
typedef sequence<CollaborationMember> CollaborationMemberSeq;


/**
 * \brief Representa uma sessão de colaboração.
 */
interface CollaborationSession {
	
	/** \brief Canal de eventos associado à sessão de colaboração. */
	readonly attribute EventChannel channel;
	
	/**
	 * \brief Registra um membro à sessão de colaboração
	 *
	 * \param name nome do membro.
	 * \param member o membro.
	 *
	 * \exception NameInUse Já existe um membro com o mesmo nome.
	 */
	void addMember(in Identifier name, in ::scs::core::IComponent member)
		raises (NameInUse, core::v2_0::services::ServiceFailure);
	
	/**
	 * \brief Descadastra um membro da sessão de colaboração
	 *
	 * \param name nome do membro.
	 * \return \c true, caso o descadastramento foi realizado com sucesso, ou 
	 * \c false, caso contrário.
	 */
	boolean removeMember(in Identifier name)
		raises (core::v2_0::services::ServiceFailure);
	
	/**
	 * \brief Recupera o componente de um membro da colaboração, ou nulo caso não 
	 * exista um membro com o nome especificado.
	 *
	 * \param name nome do membro.
	 * \return o componente do membro.
	 */
	::scs::core::IComponent getMember(in Identifier name)
		raises (core::v2_0::services::ServiceFailure);
	
	/**
	 * \brief Recupera a lista dos membros cadastrados na sessão de colaboração.
	 *
	 * \return A lista com os membros cadastrados.
	 */
	CollaborationMemberSeq getMembers() 
		raises (core::v2_0::services::ServiceFailure);
	
	/**
	 * \brief Termina a sessão de colaboração.
	 */
	void destroy()
		raises (core::v2_0::services::ServiceFailure);
	
	/**
	 * \brief Cadastra um observador para essa colaboração.
	 *
	 * \param observer o observador a ser cadastrado.
	 * \return um identificador do cadastro do observador.
	 */
	Cookie subscribeObserver(in CollaborationObserver observer)
		raises (core::v2_0::services::ServiceFailure);
	
	/**
	 * \brief Descadastra o observador da colaboração
	 *
	 * \param ck identificador do cadastro do observador.
	 *
	 * \return \c true, caso o descadastramento foi realizado com sucesso, ou 
	 * \c false, caso contrário.
	 */
	boolean unsubscribeObserver(in Cookie ck)
		raises (core::v2_0::services::ServiceFailure);
	
};

/**
 * \brief Interface para criação de sessões de colaboração.
 */
interface CollaborationRegistry {
	/**
	 * \brief Cria uma sessão de colaboração.
	 *
	 * \return \c true, caso o descadastramento foi realizado com sucesso, ou 
	 * \c false, caso contrário.
	 */
	CollaborationSession createCollaborationSession()
		raises (core::v2_0::services::ServiceFailure);
};

}; // version

}; // collaboration

}; // services

}; // openbus

}; // tecgraf

#endif
